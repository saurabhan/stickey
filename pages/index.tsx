import type { NextPage } from "next";
import Head from "next/head";
import React, { useEffect, useRef, useState } from "react";

const Keys = {
  RowOne: ["Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P"],
  RowTwo: ["A", "S", "D", "F", "G", "H", "J", "K", "L"],
  RowThree: ["Z", "X", "C", "V", "B", "N", "M"],
};

const API_URL = "https://api.quotable.io/random?max_length=100";

const Home: NextPage = () => {
  const [value, setValue] = useState("");
  const textRef = useRef<HTMLTextAreaElement>(null);
  const chars = Array.from(value);

  const getQuote = async () => {
    const response = await fetch(API_URL);
    const data = await response.json();
    setValue(data.content);
  };

  const handleOutput = (e: any) => {
    const letterEl = document.querySelectorAll("span");
    const letterValue = textRef?.current?.value;
    letterEl.forEach((char, index) => {
      const character = letterValue?.[index];
      if (character == null) {
        char.classList.remove("correct");
        char.classList.remove("incorrect");
      } else if (character === char.innerHTML) {
        char.classList.add("correct");
        char.classList.remove("incorrect");
      } else {
        char.classList.remove("correct");
        char.classList.add("incorrect");
      }
    });
  };

  const handlekey = (e: React.KeyboardEvent<HTMLButtonElement>) => {
    const keyEl = document.getElementById(e.key.toUpperCase());
    if (keyEl) {
      keyEl.classList.add("active");
    }
  };
  const handlekeyUp = (e: React.KeyboardEvent<HTMLButtonElement>) => {
    const keyEl = document.getElementById(e.key.toUpperCase());
    if (keyEl) {
      keyEl.classList.remove("active");
    }
  };

  useEffect(() => {
    const textEl = document.getElementById("text");
    textEl?.focus();
    getQuote();

    window.addEventListener("keydown", (e: any) => handlekey(e));
    window.addEventListener("keyup", (e: any) => handlekeyUp(e));
    window.addEventListener("input", (e: any) => handleOutput(e));
    return function cleanup() {
      window.removeEventListener("keydown", (e: any) => handlekey(e));
      window.removeEventListener("keydown", (e: any) => handlekeyUp(e));
      window.removeEventListener("input", (e: any) => handleOutput(e));
    };
  }, []);
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col items-center justify-center h-screen gap-20 bg-slate-100">
        <div className="relative">
          <textarea
            autoFocus
            className="outline-none text-xl p-4 leading-relaxed font-bold bg-slate-50"
            cols={60}
            rows={5}
            name="text"
            id="text"
            ref={textRef}
          ></textarea>
          <div className="absolute inset-0 outline-none text-xl font-bold p-4 leading-relaxed bg-slate-50 opacity-50">
            {chars.map((char, index) => {
              return (
                <span id="letters" className="text-slate-500" key={index}>
                  {char}
                </span>
              );
            })}
          </div>
        </div>
        <div className="flex justify-center items-center">
          <div className="flex flex-col gap-7 items-center">
            <div className="flex gap-3">
              {Keys.RowOne.map((key, index) => (
                <button
                  key={index}
                  id={key}
                  className={`h-16 w-16 rounded-lg shadow-xl bg-white flex items-center justify-center outline-none`}
                >
                  <p className="font-bold text-xl">{key}</p>
                </button>
              ))}
            </div>
            <div className="flex gap-3">
              {Keys.RowTwo.map((key, index) => (
                <button
                  key={index}
                  id={key}
                  className={`active:bg-red-300 h-16 w-16 rounded-lg shadow-xl bg-white flex items-center justify-center focus:bg-slate-200 focus:scale-95 focus:translate-y-1 focus:shadow-sm transition-all outline-none`}
                >
                  <p className="font-bold text-xl">{key}</p>
                </button>
              ))}
            </div>
            <div className="flex gap-3">
              {Keys.RowThree.map((key, index) => (
                <button
                  key={index}
                  id={key}
                  className={`h-16 w-16 rounded-lg shadow-xl bg-white flex items-center justify-center focus:bg-slate-200 focus:scale-95 focus:translate-y-1 focus:shadow-sm transition-all outline-none`}
                >
                  <p className="font-bold text-xl">{key}</p>
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Home;
